// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=inA);


    //can write to A if C instruction has d1 set to 1, and d1 is instruction[5]
    //can write to A if it was an A instruction 
    //load bit for A 
    //load bit will be true if either it was an A instruction OR it was a C instruction with d1 = true 
    Not(in=instruction[15], out=is-Ainstr);
    Not(in=is-Ainstr, out=is-Cinstr);
    Or(a=is-Ainstr, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out=addressM-dummy);
    Or16(a[0..15]=false, b=addressM-dummy, out[0..14]=addressM, out[15]=true);
    Mux16(a=outA, b=inM, sel=instruction[12], out=AslashM);

    DRegister(in=ALUoutput, load=instruction[4], out=outD);

    ALU(x=outD, y=AslashM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM, zr=zr, ng=ng);
    //if(000) then load=false
    //if(001 && out>0) then load = true 
    //if(010 && out==0) then load = true 
    //if(011 && out >=0) then load = true
    //if(100 && out < 0) then load = true 
    //if(101 && out != 0) then load = true 
    //if(110 && out <= 0) then load = true 
    //if(111) then load = true 
    Not(in=zr, out=zr-not);
    Not(in=ng, out=ng-not);
    And(a=false, b=false, out=load000);
    And(a=zr-not, b=ng-not, out=load001);
    Or(a=zr, b=false, out=load010);
    Or(a=zr, b=ng-not, out=load011);
    Or(a=ng, b=false, out=load100);
    Or(a=zr-not, b=false, out=load101);
    Or(a=zr, b=ng, out=load110);
    And(a=true, b=true, out=load111);
    Mux8Way16(a[0]=load000, b[0]=load001, c[0]=load010, d[0]=load011, e[0]=load100, f[0]=load101, g[0]=load110, h[0]=load111, sel=instruction[0..2], out=PCload16);
    GetFirstBit(in=PCload16, out=PCload);
    

     //writeM will be true if it was a C instruction with d3 = true 
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    And(a=PCload, b=is-Cinstr, out=PCload2);
    PC(in=outA, load=PCload2, inc=true, reset=reset, out[0..14]=pc, out[15] = dummy);
    
   

}